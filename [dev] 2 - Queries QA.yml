version: 43.0.9
pageUuid: 65578aa6-ac39-11e9-aa84-bf0fe9957eaa
appTemplate:
  plugins:
    ordered:
      - runOnPageLoad:
          pluginTemplate:
            id: runOnPageLoad
            type: datasource
            subtype: JavascriptQuery
            resourceName: JavascriptQuery
            template:
              ordered:
                - queryRefreshTime: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: ''
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: false
                - query: return 1
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: true
                - transformer: >-
                    // type your code here

                    // example: return formatDataAsArray(data).filter(row =>
                    row.quantity > 20)

                    return data
                - queryTimeout: '10000'
                - requireConfirmation: false
                - enableCaching: false
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T02:13:58.641Z
            updatedAt: 2019-09-22T20:59:09.051Z
      - listview1:
          pluginTemplate:
            id: listview1
            type: widget
            subtype: ListViewWidget
            template:
              ordered:
                - data: ''
                - instances: '{{ allTestCases.value.length }}'
                - itemHeight: '1'
                - scroll: false
            position2:
              position2:
                row: 1
                height: 14
                width: 8
            mobilePosition2:
              position2:
                height: 14
                width: 8
            createdAt: 2019-07-22T02:15:30.914Z
            updatedAt: 2019-09-22T20:59:09.051Z
      - text1:
          pluginTemplate:
            id: text1
            type: widget
            subtype: TextWidget
            template:
              ordered:
                - horizontalAlign: left
                - truncateOverflow: false
                - verticalAlign: center
                - scrollOverflow: false
                - tooltipText: ''
                - value: >-
                    {{i + 1}}. {{ allTestCases.value[i].name }}: {{
                    allTestCases.value[i].passed ? '✅' : '❌' }}
                - renderAsHtml: true
                - backgroundColor: '#0000'
                - textColor: '#312929'
                - renderAsMarkdown: true
            position2:
              position2:
                container: listview1
                height: 1
                width: 12
            mobilePosition2:
              position2:
                container: listview1
                height: 1
                width: 3
            createdAt: 2019-07-22T02:15:41.747Z
            updatedAt: 2020-06-30T20:18:18.744Z
      - allTestCases:
          pluginTemplate:
            id: allTestCases
            type: function
            subtype: Function
            template:
              ordered:
                - funcBody: "return [\n  {\n    name: 'Run when params change',\n    passed: true,\n\t},\n\t{\n    name: 'Manual query normally doesnt run on page load',\n    passed: {{ !manualQuery.data }},\n\t},\n\t{\n    name: 'Manual query runs on page load when flag on',\n    passed: {{ runOnPageLoad.data }},\n\t},\n  {\n    name: 'Query runs periodically',\n    passed: {{ counter.value >= 3 }},\n\t},\n  {\n    name: 'Query doesnt run when disabled',\n    passed: {{ counter.value < 5 }},\n\t},\n  {\n    name: 'Run-when-params-change query runs on page load',\n    passed: {{ normalAutoQuery.data }},\n\t},\n\t{\n    name: 'Run-when-params-change query runs when params change',\n    passed: {{ runOnParamsChange.data }},\n\t},\n  {\n    name: 'On-success query trigger',\n    passed: {{ runMeOnSuccess.data }},\n\t},\n\t{\n    name: 'On-error query trigger',\n    passed: {{ runMeOnError.data }},\n\t},\n\t{\n    name: 'async JS query works',\n    passed: {{ asyncJsQuery.data === 1 }},\n\t},\n  {\n    name: 'query with transformer works',\n    passed: {{ withTransfomer.data === 2 }},\n\t},\n  {\n    name: 'disabled query isnt marks itself clean',\n    passed: {{ !alwaysDisabled.data }},\n\t},\n  {\n    name: 'query time out works',\n    passed: {{ withTimeout.error.includes('network timeout') }},\n\t},\n\t{\n    name: 'Plain rest query works',\n    passed: {{ normalRestQuery.data }},\n\t},\n]"
                - value: ''
            createdAt: 2019-07-22T02:16:50.124Z
            updatedAt: 2019-09-22T20:59:09.051Z
      - text2:
          pluginTemplate:
            id: text2
            type: widget
            subtype: TextWidget
            template:
              ordered:
                - horizontalAlign: left
                - truncateOverflow: false
                - verticalAlign: center
                - scrollOverflow: false
                - tooltipText: ''
                - value: '# Query Test Cases'
                - renderAsHtml: true
                - backgroundColor: '#0000'
                - textColor: '#312929'
                - renderAsMarkdown: true
            position2:
              position2:
                height: 1
                width: 8
            mobilePosition2:
              position2:
                height: 1
                width: 3
            createdAt: 2019-07-22T02:19:13.573Z
            updatedAt: 2019-09-22T20:59:09.051Z
      - manualQuery:
          pluginTemplate:
            id: manualQuery
            type: datasource
            subtype: JavascriptQuery
            resourceName: JavascriptQuery
            template:
              ordered:
                - queryRefreshTime: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: ''
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: false
                - query: return 1
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: false
                - transformer: >-
                    // type your code here

                    // example: return formatDataAsArray(data).filter(row =>
                    row.quantity > 20)

                    return data
                - queryTimeout: '10000'
                - requireConfirmation: false
                - enableCaching: false
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T02:23:39.723Z
            updatedAt: 2019-09-22T20:59:09.051Z
      - queryRunsPeriodically:
          pluginTemplate:
            id: queryRunsPeriodically
            type: datasource
            subtype: JavascriptQuery
            resourceName: JavascriptQuery
            template:
              ordered:
                - queryRefreshTime: '1000'
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: '{{ counter.value >= 3 }}'
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: true
                - query: counter.setValue(counter.value + 1)
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: false
                - transformer: >-
                    // type your code here

                    // example: return formatDataAsArray(data).filter(row =>
                    row.quantity > 20)

                    return data
                - queryTimeout: '10000'
                - requireConfirmation: false
                - enableCaching: false
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T02:25:11.944Z
            updatedAt: 2019-09-22T20:59:09.051Z
      - counter:
          pluginTemplate:
            id: counter
            type: state
            subtype: State
            template:
              ordered:
                - value: '0'
            createdAt: 2019-07-22T02:25:22.927Z
            updatedAt: 2019-09-22T20:59:09.051Z
      - alwaysDisabled:
          pluginTemplate:
            id: alwaysDisabled
            type: datasource
            subtype: SqlTransformQuery
            resourceName: SQL Transforms
            template:
              ordered:
                - queryRefreshTime: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: '{{ true }}'
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: true
                - query: select 1
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: false
                - transformer: |-
                    // type your code here
                    return data
                - queryTimeout: '10000'
                - requireConfirmation: false
                - enableCaching: false
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T02:29:59.916Z
            updatedAt: 2019-09-22T20:59:09.052Z
      - runMeOnSuccess:
          pluginTemplate:
            id: runMeOnSuccess
            type: datasource
            subtype: JavascriptQuery
            resourceName: JavascriptQuery
            template:
              ordered:
                - queryRefreshTime: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: ''
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: false
                - query: return 1
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: false
                - transformer: >-
                    // type your code here

                    // example: return formatDataAsArray(data).filter(row =>
                    row.quantity > 20)

                    return data
                - queryTimeout: '10000'
                - requireConfirmation: false
                - enableCaching: false
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T02:30:34.420Z
            updatedAt: 2019-09-22T20:59:09.052Z
      - runMeOnError:
          pluginTemplate:
            id: runMeOnError
            type: datasource
            subtype: JavascriptQuery
            resourceName: JavascriptQuery
            template:
              ordered:
                - queryRefreshTime: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: ''
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: false
                - query: return 1
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: false
                - transformer: >-
                    // type your code here

                    // example: return formatDataAsArray(data).filter(row =>
                    row.quantity > 20)

                    return data
                - queryTimeout: '10000'
                - requireConfirmation: false
                - enableCaching: false
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T02:30:40.282Z
            updatedAt: 2019-09-22T20:59:09.052Z
      - normalAutoQuery:
          pluginTemplate:
            id: normalAutoQuery
            type: datasource
            subtype: SqlTransformQuery
            resourceName: SQL Transforms
            template:
              ordered:
                - queryRefreshTime: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: ''
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: true
                - query: select 1
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess:
                    - runMeOnSuccess
                    - asyncJsQuery
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: false
                - transformer: >-
                    // type your code here

                    // example: return formatDataAsArray(data).filter(row =>
                    row.quantity > 20)

                    return data
                - queryTimeout: '10000'
                - requireConfirmation: false
                - enableCaching: false
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T03:55:50.182Z
            updatedAt: 2019-09-22T20:59:09.052Z
      - failingQuery:
          pluginTemplate:
            id: failingQuery
            type: datasource
            subtype: SqlTransformQuery
            resourceName: SQL Transforms
            template:
              ordered:
                - queryRefreshTime: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: ''
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: true
                - query: select * from foo
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - metadata: null
                - triggersOnFailure:
                    - runMeOnError
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: false
                - transformer: >-
                    // type your code here

                    // example: return formatDataAsArray(data).filter(row =>
                    row.quantity > 20)

                    return data
                - queryTimeout: '10000'
                - requireConfirmation: false
                - enableCaching: false
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T03:58:17.330Z
            updatedAt: 2019-09-22T20:59:09.052Z
      - runOnParamsChange:
          pluginTemplate:
            id: runOnParamsChange
            type: datasource
            subtype: SqlTransformQuery
            resourceName: SQL Transforms
            template:
              ordered:
                - queryRefreshTime: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: ''
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: true
                - query: 'select * from {{ normalAutoQuery.data }}'
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: false
                - transformer: >-
                    // type your code here

                    // example: return formatDataAsArray(data).filter(row =>
                    row.quantity > 20)

                    return data
                - queryTimeout: '10000'
                - requireConfirmation: false
                - enableCaching: false
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T03:59:29.260Z
            updatedAt: 2019-09-22T20:59:09.052Z
      - asyncJsQuery:
          pluginTemplate:
            id: asyncJsQuery
            type: datasource
            subtype: JavascriptQuery
            resourceName: JavascriptQuery
            template:
              ordered:
                - queryRefreshTime: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: ''
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: false
                - query: |-
                    return new Promise(resolve => {
                      window.setTimeout(() => resolve(1), 1000)
                    })
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: false
                - transformer: >-
                    // type your code here

                    // example: return formatDataAsArray(data).filter(row =>
                    row.quantity > 20)

                    return data
                - queryTimeout: '10000'
                - requireConfirmation: false
                - enableCaching: false
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T04:01:12.627Z
            updatedAt: 2019-09-22T20:59:09.052Z
      - withTransfomer:
          pluginTemplate:
            id: withTransfomer
            type: datasource
            subtype: SqlTransformQuery
            resourceName: SQL Transforms
            template:
              ordered:
                - queryRefreshTime: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: ''
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: true
                - query: select 1
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: true
                - runWhenPageLoads: false
                - transformer: 'return data[0][1] + 1'
                - queryTimeout: '10000'
                - requireConfirmation: false
                - enableCaching: false
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T04:03:15.135Z
            updatedAt: 2019-09-22T20:59:09.052Z
      - withTimeout:
          pluginTemplate:
            id: withTimeout
            type: datasource
            subtype: RESTQuery
            resourceName: REST-WithoutResource
            template:
              ordered:
                - queryRefreshTime: ''
                - paginationLimit: ''
                - body: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: ''
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: true
                - paginationPaginationField: ''
                - headers: ''
                - paginationEnabled: false
                - query: 'https://jsonplaceholder.typicode.com/todos'
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - cookies: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - paginationDataField: ''
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: false
                - transformer: >-
                    // type your code here

                    // example: return formatDataAsArray(data).filter(row =>
                    row.quantity > 20)

                    return data
                - queryTimeout: '10'
                - requireConfirmation: false
                - type: GET
                - enableCaching: false
                - bodyType: json
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T04:06:34.300Z
            updatedAt: 2019-09-22T20:59:09.052Z
      - normalRestQuery:
          pluginTemplate:
            id: normalRestQuery
            type: datasource
            subtype: RESTQuery
            resourceName: REST-WithoutResource
            template:
              ordered:
                - queryRefreshTime: ''
                - paginationLimit: ''
                - body: ''
                - queryDisabledMessage: ''
                - successMessage: ''
                - queryDisabled: ''
                - playgroundQuerySaveId: 0
                - resourceNameOverride: ''
                - runWhenModelUpdates: true
                - paginationPaginationField: ''
                - headers: ''
                - paginationEnabled: false
                - query: 'https://google.com'
                - playgroundQueryUuid: ''
                - playgroundQueryId: 0
                - privateParams: []
                - triggersOnSuccess: []
                - runWhenPageLoadsDelay: ''
                - data: null
                - importedQueryInputs:
                    ordered: []
                - showSuccessConfetti: false
                - isImported: false
                - showSuccessToaster: true
                - cacheKeyTtl: ''
                - cookies: ''
                - metadata: null
                - triggersOnFailure: []
                - errorTransformer: |-
                    // type your code here
                    // example: return data.find(element => element.isError)
                    return data.error
                - confirmationMessage: null
                - isFetching: false
                - rawData: null
                - queryTriggerDelay: '0'
                - watchedParams: []
                - enableErrorTransformer: false
                - paginationDataField: ''
                - timestamp: 0
                - importedQueryDefaults:
                    ordered: []
                - enableTransformer: false
                - runWhenPageLoads: false
                - transformer: >-
                    // type your code here

                    // example: return formatDataAsArray(data).filter(row =>
                    row.quantity > 20)

                    return data
                - queryTimeout: ''
                - requireConfirmation: false
                - type: GET
                - enableCaching: false
                - bodyType: json
                - queryThrottleTime: '750'
            createdAt: 2019-07-22T04:10:19.140Z
            updatedAt: 2020-03-26T15:07:10.053Z
  urlFragmentDefinitions: []
  pageLoadValueOverrides: []
  customDocumentTitle: ''
  isGlobalWidget: false
  isFetching: false
  instrumentationEnabled: false
  customDocumentTitleEnabled: false
  version: 2.60.4
  responsiveLayoutDisabled: false
  createdAt: null
